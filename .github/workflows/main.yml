name: CI

on:
  push:
  workflow_dispatch:
  
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-gradle
          
      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew build
          ls -lah $GITHUB_WORKSPACE/build/libs/
          
      - name: Archive artifact java app
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: java-app
          path: build/libs/testing-web-0.0.1-SNAPSHOT.jar
  
  dockerbuild:
    name: Docker build
    runs-on: ubuntu-latest
    needs: build
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Docker login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Download artifact java app
        uses: actions/download-artifact@v3
        with:
          name: java-app
          path: .
          
      - name: Docker build
        run: |
          chmod 755 testing-web-0.0.1-SNAPSHOT.jar
          ls -lah
          docker build --tag lobozoldick/microservicio-java:latest .
          docker images

      - name: Docker push
        run: |
          docker push lobozoldick/microservicio-java

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: microservicio-java
          region: us-central1
          source: ./

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}

      - name: Save token to file
        run: |
          gcloud auth print-identity-token
          gcloud auth print-identity-token > gcp_token.txt

      - name: Execute Postman tests
        run: |
          npm install -g newman
          export GCP_TOKEN=$(cat gcp_token.txt)
          newman run Postman/scripts/pruebas_Aceptacion.postman_collection.json --env-var GCP_TOKEN=$GCP_TOKEN
  
